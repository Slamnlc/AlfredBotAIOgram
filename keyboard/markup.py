from aiogram import types

from classes import User
from data.config import ADMINS
from keyboard.inline.callback_data import weather_callback, book_search
from loader import db
from service.functions.currency_function import getUsersMarkup


def startMarkup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton(text='–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ'))
    markup.add(types.KeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –∑–∞–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'))
    return markup


def mainMarkup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton('–ö—É—Ä—Å –≤–∞–ª—é—Ç'))
    markup.add(types.KeyboardButton('–ü–æ–≥–æ–¥–∞'))
    markup.add(types.KeyboardButton('–ü–æ–∏—Å–∫ –∫–Ω–∏–≥'))
    markup.add(types.KeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏'))
    markup.add(types.KeyboardButton('Test'))

    return markup


def settingsMarkup(user: User):
    data = db.getCurrencyList()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    backButton = types.KeyboardButton('–ù–∞–∑–∞–¥ ‚¨Ö')
    if user.location is None:
        mainCity = types.KeyboardButton(f'–£–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –¥–ª—è –ø–æ–≥–æ–¥—ã')
    else:
        mainCity = types.KeyboardButton(f'–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –¥–ª—è –ø–æ–≥–æ–¥—ã - {user.getMainCity()}')
    mainCurrency = types.KeyboardButton(f"–û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞ - {user.currency} {data[user.currency]['Emoji']}")
    dayForShow = types.KeyboardButton(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫—É—Ä—Å–∞: {user.dayForShow}')
    currencyList = types.KeyboardButton(f'–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é: {user.getUsedCurrency()}')

    markup.add(backButton)
    markup.add(mainCurrency)
    markup.add(mainCity)
    markup.add(dayForShow)
    markup.add(currencyList)
    if user.id in ADMINS:
        markup.add(types.KeyboardButton(f'–ö–æ–ª–∏—á–µ—Ç—Å–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - '
                                        f'{getUsersMarkup(db, returnNumber=True)}'))

    return markup


def locationMarkup(backToMenu=False):
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    if backToMenu:
        markup.add(types.KeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    else:
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ ‚¨Ö'))
    markup.add(types.KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', request_location=True))
    return markup


def weatherMarkup(cityList, oneTime=False, addSearch=True):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=oneTime)
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ ‚¨Ö'))
    if addSearch:
        markup.add(types.KeyboardButton('–ò—Å–∫–∞—Ç—å –µ—â–µ üîç'))
    i = 1
    for elem in cityList:
        markup.add(types.KeyboardButton(f"{i}. {elem[0]}"))
        i += 1
    return markup


def futureWeatherInlineMarkup():
    markup = types.InlineKeyboardMarkup()

    days_1 = types.InlineKeyboardButton(text='–ù–∞ –∑–∞–≤—Ç—Ä–∞', callback_data=weather_callback.new(days=1))
    days_3 = types.InlineKeyboardButton(text='3 –¥–Ω—è', callback_data=weather_callback.new(days=3))
    days_7 = types.InlineKeyboardButton(text='7 –¥–Ω–µ–π', callback_data=weather_callback.new(days=6))

    markup.add(days_1, days_3, days_7)

    return markup


def bookMainMenu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ ‚¨Ö'))
    return markup


def bookMarkup(data: list):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥ ‚¨Ö'))
    for elem in data:
        markup.add(types.KeyboardButton(f"{elem[1].title()} | {elem[2].title()} | "
                                        f"{elem[4]} | –§–∞–π–ª–æ–≤: {elem[6][0].__len__()}"))
    return markup


def bookItemMarkup(data: list):
    markup = types.InlineKeyboardMarkup(row_width=6)
    for item in data:
        txt = item.split('/')[-1]
        markup.insert(types.InlineKeyboardButton(text=txt, callback_data=book_search.new(link=item)))
    return markup
