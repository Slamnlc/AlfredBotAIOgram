from datetime import datetime

from aiogram import types
from aiogram.dispatcher import FSMContext

from classes.User import User
from filters import IsCurrency
from keyboard.currency_markups import currencyMarkup
from keyboard.markup import settingsMarkup, locationMarkup, backOnButton
from loader import dp
from service.functions.text_function import getFlag, getCurrentState, replaceListOne
from states import SettingsState
from states.states_list import FirstSettings


@dp.message_handler(content_types='text', text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
async def openSettingsMenu(message: types.Message):
    user = User(message.from_user.id)
    await message.delete()
    await message.answer('–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω—É–∂–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º', reply_markup=settingsMarkup(user))
    await SettingsState.settingsMenu.set()


@dp.message_handler(content_types='text', state=SettingsState.settingsMenu,
                    regexp="—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞")
async def changeMainCurrency(message: types.Message):
    await message.delete()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–µ',
                         reply_markup=currencyMarkup(user=User(message.from_user.id), addUAH=True))
    await SettingsState.setMainCurrency.set()


@dp.message_handler(IsCurrency(), content_types='text',
                    state=[SettingsState.setMainCurrency, FirstSettings.showCurrency])
async def setMainCurrencySettings(message: types.Message, state: FSMContext):
    user = User(message.from_user.id)
    currency = message.text[:3]
    await message.delete()
    user.setCurrency(currency)
    currentState = await getCurrentState(state)
    if currentState == 'showCurrency':
        await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 5 –≤–∞–ª—é—Ç (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)', reply_markup=currencyMarkup(user, True, True),
                             disable_notification=True)
        await message.answer(text=f"{currency} {getFlag(currency)} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞\n"
                                  f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –í–∞—Å –≤–∞–ª—é—Ç—ã (–∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ)",
                             reply_markup=types.ReplyKeyboardRemove())
        await FirstSettings.indicateCurrencyList.set()
        await state.set_data(user.dictUserCurrency())
    else:
        await message.answer(f"{currency} {getFlag(currency)} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ –≤–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–µ",
                             reply_markup=settingsMarkup(user))
        await SettingsState.settingsMenu.set()


@dp.message_handler(content_types='text', state=SettingsState.settingsMenu, regexp="–¥–ª—è –≤—ã–≤–æ–¥–∞")
async def changeDayForShow(message: types.Message):
    await message.delete()
    await message.answer('–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤—ã–≤–æ–¥–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç')
    await SettingsState.setDayForShow.set()


@dp.message_handler(content_types='text', state=[SettingsState.setDayForShow, FirstSettings.indicateDaysForShow])
async def setDayForShow(message: types.Message, state: FSMContext):
    user = User(message.from_user.id)
    await message.delete()
    if message.text.isdigit():
        if 0 < int(message.text) < 401:
            user.setDayForShow(message.text)
            currentState = await getCurrentState(state)
            if currentState == 'setDayForShow':
                await message.answer(f"–û–∫–µ–π. –ë—É–¥—É –≤—ã–≤–æ–¥–∏—Ç—å –∫—É—Ä—Å –∑–∞ {message.text} –¥–Ω–µ–π",
                                     reply_markup=settingsMarkup(user))
                await SettingsState.settingsMenu.set()
            else:
                await message.answer(f"–û–∫–µ–π. –ë—É–¥—É –≤—ã–≤–æ–¥–∏—Ç—å –∫—É—Ä—Å –∑–∞ {message.text} –¥–Ω–µ–π\n"
                                     f"–£—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –¥–ª—è –ø–æ–≥–æ–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?",
                                     reply_markup=locationMarkup(True))
                await FirstSettings.indicateMainCity.set()
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 400")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")


@dp.message_handler(content_types='text', state=SettingsState.settingsMenu, regexp='–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç –≤')
async def changeCurrencyList(message: types.Message, state: FSMContext):
    user = User(message.from_user.id)
    await message.delete()
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –í–∞—Å –≤–∞–ª—é—Ç—ã', reply_markup=currencyMarkup(user, True, True),
                         disable_notification=True)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 5 –≤–∞–ª—é—Ç')
    await SettingsState.setCurrencyList.set()
    await state.set_data(user.dictUserCurrency())


@dp.message_handler(content_types='text', state=SettingsState.settingsMenu, regexp='–ø—É–Ω–∫—Ç –¥–ª—è –ø–æ–≥–æ–¥—ã')
async def changeMainCity(message: types.Message):
    await message.delete()
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', reply_markup=locationMarkup())
    await SettingsState.searchMainCity.set()


@dp.message_handler(content_types='text', state=SettingsState.settingsMenu, text='–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
async def deleteNotification(message: types.Message):
    user = User(message.from_user.id)
    user.deleteNotification()
    await message.delete()
    await message.answer('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã üò¢', reply_markup=settingsMarkup(user))


@dp.message_handler(content_types='text', state=SettingsState.settingsMenu, regexp='—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
async def setNotificationTime(message: types.Message):
    await message.delete()
    await message.answer('–í–æ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ '
                         '(–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) –∏ –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç?\n'
                         '–£–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 00:00 (—Å–ø–µ—Ä–≤–∞ —á–∞—Å, –∑–∞—Ç–µ–º –º–∏–Ω—É—Ç—ã)',
                         reply_markup=backOnButton())

    await SettingsState.setNotifyTime.set()


@dp.message_handler(content_types='text', state=SettingsState.setNotifyTime)
async def selectNotificationTime(message: types.Message):
    txt = replaceListOne(message.text.strip(), ['.', ',', '/', '-', ';'], ':')
    await message.delete()
    sp = txt.split(':')
    if sp.__len__() == 2:
        if -1 < int(sp[0]) < 25 and -1 < int(sp[1]) < 61:
            if -1 < int(sp[1]) < 61:
                user = User(message.from_user.id)
                txt = datetime.strptime(txt, '%H:%M').strftime('%H:%M')
                user.setNotificetionTime(txt)
                await message.answer(f'–ë—É–¥—É –≤—ã—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ {txt} ‚è∞', reply_markup=settingsMarkup(user))
                await SettingsState.settingsMenu.set()
            else:
                await message.answer('–Ø –Ω–µ –∑–Ω–∞—é —Å—Ç–æ–ª—å–∫–æ –º–∏–Ω—É—Ç üôÉ')
        else:
            await message.answer('–Ø –Ω–µ –∑–Ω–∞—é —Å—Ç–æ–ª—å–∫–æ —á–∞—Å–æ–≤ üôÉ')
    elif sp.__len__() <= 1:
        await message.answer('–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ üòü')
    else:
        await message.answer('–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ üòü')
